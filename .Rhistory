answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2)
answer1_1_10 <- 1
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5
answer1_1_6 <- 2
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1
answer1_1_11 <- NULL
answer1_1_12 <- 0
# YOUR CODE HERE
. = ottr::check("tests/Q1.1.R")
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5
answer1_1_6 <- 2
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- NULL
answer1_1_11 <- 0
answer1_1_12 <- 0
# YOUR CODE HERE
. = ottr::check("tests/Q1.1.R")
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5
answer1_1_6 <- 2
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- NULL
answer1_1_11 <- inf
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5
answer1_1_6 <- 2
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- NULL
answer1_1_11 <- 1/0
answer1_1_12 <- 0
# YOUR CODE HERE
. = ottr::check("tests/Q1.1.R")
# Load necessary packages.
library(testthat)
library(digest)
# Load necessary packages.
library(testthat)
library(digest)
# Load necessary packages.
library(testthat)
library(digest)
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5
answer1_1_6 <- 2
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 2
answer1_1_11 <- 1/0
answer1_1_12 <- 0
# YOUR CODE HERE
. = ottr::check("tests/Q1.1.R")
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- 1/0
answer1_1_12 <- 0
# YOUR CODE HERE
. = ottr::check("tests/Q1.1.R")
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- 2 # Var(Y)
answer1_1_12 <- 0
# YOUR CODE HERE
. = ottr::check("tests/Q1.1.R")
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- -2 # Var(Y)
answer1_1_12 <- 0
# YOUR CODE HERE
. = ottr::check("tests/Q1.1.R")
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- 0 # Var(Y)
answer1_1_12 <- 0
# YOUR CODE HERE
. = ottr::check("tests/Q1.1.R")
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- 2 # Var(Y)
answer1_1_12 <- 0
# YOUR CODE HERE
. = ottr::check("tests/Q1.1.R")
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- 4 # Var(Y)
answer1_1_12 <- 0
# YOUR CODE HERE
. = ottr::check("tests/Q1.1.R")
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- 4 # Var(Y)
answer1_1_12 <- 0
# YOUR CODE HERE
. = ottr::check("tests/Q1.1.R")
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- 4/3 # Var(Y)
answer1_1_12 <- 0
# YOUR CODE HERE
. = ottr::check("tests/Q1.1.R")
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- NULL
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- 4/3 # Var(Y)
answer1_1_12 <- 0
# YOUR CODE HERE
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- 1/2
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- 4/3 # Var(Y)
answer1_1_12 <- 0
# Note: PDF f(y) = 1/4 for Y continuous uniform (0 to 4)
. = ottr::check("tests/Q1.1.R")
answer2_2_1 <- (5.1 -5)**2 * 4
answer2_2_2 <- NULL
# YOUR CODE HERE
. = ottr::check("tests/Q2.2.R")
answer2_2_1 <- (5.1 -5)**2 * 4 ## The probability here is the volumn of a cube between
## the two-dimentional x, y-axis plot and the PDF that overtop of the plot. The area of the
## cube's bottom and top surface can be calculated as (5.1 - 5) x (5.1 - 5), and the height is ## Therefore, the probability (or volumn) is (5.1 - 5) x (5.1 - 5) x 4 = 0.04.
answer2_2_2 <- NULL
# YOUR CODE HERE
. = ottr::check("tests/Q2.2.R")
# Load necessary packages.
library(testthat)
library(digest)
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- 1/2
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- 4/3 # Var(Y)
answer1_1_12 <- 0
# Note: PDF f(y) = 1/4 for Y continuous uniform (0 to 4)
. = ottr::check("tests/Q1.1.R")
# Load necessary packages.
library(testthat)
library(digest)
answer2_2_1 <- (5.1 -5)**2 * 4 ## The probability here is the volumn of a cube between
## the two-dimentional x, y-axis plot and the PDF that overtop of the plot. The area of the
## cube's bottom and top surface can be calculated as (5.1 - 5) x (5.1 - 5), and the height is ## Therefore, the probability (or volumn) is (5.1 - 5) x (5.1 - 5) x 4 = 0.04.
answer2_2_2 <- NULL
# YOUR CODE HERE
answer2_2_1 <- (5.1 -5)**2 * 4
# The probability here is the volumn of a cube between the two-dimentional x, y-axis
# plot and the PDF that overtop of the plot. The area of the cube's bottom and
# top surface can be calculated as (5.1 - 5) x (5.1 - 5), and the height is 4.
# Therefore, the probability (or volumn) is (5.1 - 5) x (5.1 - 5) x 4 = 0.04.
answer2_2_2 <- NULL
# YOUR CODE HERE
. = ottr::check("tests/Q2.2.R")
answer2_2_1 <- (5.1 -5)**2 * 4
# The probability here is the volumn of a cube between the two-dimentional x, y-axis
# plot and the PDF that overtop of the plot. The area of the cube's bottom and
# top surface can be calculated as (5.1 - 5) x (5.1 - 5), and the height is 4.
# Therefore, the probability (or volumn) is (5.1 - 5) x (5.1 - 5) x 4 = 0.04.
answer2_2_2 <- 3/4
# YOUR CODE HERE
. = ottr::check("tests/Q2.2.R")
answer2_2_1 <- (5.1 -5)**2 * 4
# The probability here is the volumn of a cube between the two-dimentional x, y-axis
# plot and the PDF that overtop of the plot. The area of the cube's bottom and
# top surface can be calculated as (5.1 - 5) x (5.1 - 5), and the height is 4.
# Therefore, the probability (or volumn) is (5.1 - 5) x (5.1 - 5) x 4 = 0.04.
answer2_2_2 <- 1 - 1/4
# YOUR CODE HERE
. = ottr::check("tests/Q2.2.R")
answer2_2_1 <- (5.1 -5)**2 * 4
# The probability here is the volumn of a cube between the two-dimentional x, y-axis
# plot and the PDF that overtop of the plot. The area of the cube's bottom and
# top surface can be calculated as (5.1 - 5) x (5.1 - 5), and the height is 4.
# Therefore, the probability (or volumn) is (5.1 - 5) x (5.1 - 5) x 4 = 0.04.
answer2_2_2 <- 1 - 1/4
# We can get the probability of both two people do not finish in less than 5 hours
# and 15 min (that is 5.25 hours), then the answer to this question would be the
# complement. The proability that both two people do not finish in less than 5.25
# hours will be (5.5 - 5.25) * (5.5 - 5.25) * 4 = 0.25. Therefore, the probability
# that at least one person finishes in less than 5.25 hours is 1 - 0.25 = 0.75.
# YOUR CODE HERE
. = ottr::check("tests/Q2.2.R")
answer4_1_1 <- 1/2
answer4_1_2 <- NULL
answer4_1_3 <- NULL
answer4_1_4 <- NULL
# YOUR CODE HERE
. = ottr::check("tests/Q4.1.R")
answer4_1_1 <- 1/2
answer4_1_2 <- 0
answer4_1_3 <- NULL
answer4_1_4 <- NULL
# YOUR CODE HERE
. = ottr::check("tests/Q4.1.R")
answer4_1_1 <- 1/2
answer4_1_2 <- 0
answer4_1_3 <- 1/2 - 1/2*1/2*1/2
answer4_1_4 <- NULL
# YOUR CODE HERE
. = ottr::check("tests/Q4.1.R")
answer4_1_1 <- 1/2
answer4_1_2 <- 0
answer4_1_3 <- 1/2 - 1/2*1/2*1/2
answer4_1_4 <- 0.8*(1/2)
# YOUR CODE HERE
. = ottr::check("tests/Q4.1.R")
answer4_1_1 <- 1/2
answer4_1_2 <- 0
answer4_1_3 <- 1/2 - 1/2*1/2*1/2
answer4_1_4 <- 0.8**(1/2)
# YOUR CODE HERE
. = ottr::check("tests/Q4.1.R")
# Load necessary packages.
library(testthat)
library(digest)
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- 1/2
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- 4/3 # Var(Y)
answer1_1_12 <- 0
# Note: PDF f(y) = 1/4 for Y continuous uniform (0 to 4)
. = ottr::check("tests/Q1.1.R")
answer2_2_1 <- (5.1 -5)**2 * 4
# The probability here is the volumn of a cube between the two-dimentional x, y-axis
# plot and the PDF that overtop of the plot. The area of the cube's bottom and
# top surface can be calculated as (5.1 - 5) x (5.1 - 5), and the height is 4.
# Therefore, the probability (or volumn) is (5.1 - 5) x (5.1 - 5) x 4 = 0.04.
answer2_2_2 <- 1 - 1/4
# We can get the probability of both two people do not finish in less than 5 hours
# and 15 min (that is 5.25 hours), then the answer to this question would be the
# complement. The proability that both two people do not finish in less than 5.25
# hours will be (5.5 - 5.25) * (5.5 - 5.25) * 4 = 0.25. Therefore, the probability
# that at least one person finishes in less than 5.25 hours is 1 - 0.25 = 0.75.
# YOUR CODE HERE
. = ottr::check("tests/Q2.2.R")
answer4_1_1 <- 1/2
answer4_1_2 <- 0
answer4_1_3 <- 1/2 - 1/2*1/2*1/2
answer4_1_4 <- 0.8**(1/2)
# YOUR CODE HERE
. = ottr::check("tests/Q4.1.R")
# Load necessary packages.
library(testthat)
library(digest)
answer1_1_1 <- 1 / 5
answer1_1_2 <- 0
answer1_1_3 <- 0
answer1_1_4 <- 0.1 * 1/4
answer1_1_5 <- (1 + 2 + 3 + 4) / 5 # E(X) = 2
answer1_1_6 <- 2 # E(Y)
answer1_1_7 <- 1/2
answer1_1_8 <- 2 / 5
answer1_1_9 <- 1/4 * (2**(1/2))
answer1_1_10 <- 1/5 * (4 + 1 + 1 + 4) # Var(X) = 2
answer1_1_11 <- 4/3 # Var(Y)
answer1_1_12 <- 0
# Note: PDF f(y) = 1/4 for Y continuous uniform (0 to 4)
. = ottr::check("tests/Q1.1.R")
answer2_2_1 <- (5.1 -5)**2 * 4
# The probability here is the volumn of a cube between the two-dimentional x, y-axis
# plot and the PDF that overtop of the plot. The area of the cube's bottom and
# top surface can be calculated as (5.1 - 5) x (5.1 - 5), and the height is 4.
# Therefore, the probability (or volumn) is (5.1 - 5) x (5.1 - 5) x 4 = 0.04.
answer2_2_2 <- 1 - 1/4
# We can get the probability of both two people do not finish in less than 5 hours
# and 15 min (that is 5.25 hours), then the answer to this question would be the
# complement. The proability that both two people do not finish in less than 5.25
# hours will be (5.5 - 5.25) * (5.5 - 5.25) * 4 = 0.25. Therefore, the probability
# that at least one person finishes in less than 5.25 hours is 1 - 0.25 = 0.75.
# YOUR CODE HERE
. = ottr::check("tests/Q2.2.R")
answer4_1_1 <- 1/2
answer4_1_2 <- 0
answer4_1_3 <- 1/2 - 1/2*1/2*1/2
answer4_1_4 <- 0.8**(1/2)
# YOUR CODE HERE
. = ottr::check("tests/Q4.1.R")
answer4_1_1 <- 1/2
answer4_1_2 <- 0
answer4_1_3 <- 1/2 - 1/2*1/2*1/2
answer4_1_4 <- 0.8**(1/2)
# YOUR CODE HERE
. = ottr::check("tests/Q4.1.R")
octane$plot_ddist +
geom_vline(
xintercept = sqrt(0.05),
linetype = "dashed"
) +
geom_vline(
xintercept = sqrt(0.95),
linetype = "dashed"
) +
geom_text(x = (sqrt(0.05) + sqrt(0.95)) / 2, y = 0.5, label = "90%") +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
smaller <- ggplot2::diamonds %>%
filter(carat <= 2.5)
source("~/.active-rstudio-document", echo=TRUE)
source("~/MDS/521_lectures/diamonds-exercise-rmd/01 report diamonds sizes.Rmd", encoding = 'UTF-8')
library(ggplot2)
library(dplyr)
smaller <- ggplot2::diamonds %>%
filter(carat <= 2.5)
`r nrow(diamonds) - nrow(smaller)
smaller %>%
ggplot(aes(carat)) +
geom_freqpoly(binwidth = 0.01)
smaller %>%
ggplot(aes(carat)) +
geom_freqpoly(binwidth = 0.01)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary packages
library(tidyverse)
# define a function to select a column and filter it by certain conditions for a data frame
select_filter <- function(data, col, ... ) {
data |>
select({{col}}) |>
filter(...)
}
df_test <- data.frame(col1 = c(10, 20, 30, 40),
col2 = c('a', 'b', 'c', 'd'))
select_filter(df_test, col1, col1 >= 20)
# Load necessary packages
library(tidyverse)
# define a function to select a column and filter it by certain conditions for a data frame
select_filter <- function(data, col, ...) {
data |>
select({{col}}) |>
filter(...)
}
df_test <- data.frame(col1 = c(10, 20, 30, 40),
col2 = c('a', 'b', 'c', 'd'))
select_filter(df_test, col1, col1 >= 20)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary packages
library(tidyverse)
# define a function to select a column and filter it by certain conditions for a data frame
select_filter <- function(data, col, ...) {
data |>
select({{col}}) |>
filter(...)
}
df_test <- data.frame(col1 = c(10, 20, 30, 40),
col2 = c('a', 'b', 'c', 'd'))
select_filter(df_test, col1, col1 >= 20)
# define a function to calculate variance from a numerical vector
variance <- function(x) {
if (!is.numeric(x)){
stop("Cannot take inputs for non-numerical values")
}
sum <- 0
for (i in x) {
sum <- sum + i
}
mean <- sum/length(x)
sum_diff <- 0
for (j in x) {
sum_diff <- sum_diff + (j - mean)**2
}
round((sum_diff / (length(x) - 1)), 2)
}
# define a function to calculate variance from a numerical vector
# below code from the exercise 3 of my lab3 assignment (DSCI 523 course)
variance <- function(x) {
if (!is.numeric(x)){
stop("Cannot take inputs for non-numerical values")
}
sum <- 0
for (i in x) {
sum <- sum + i
}
mean <- sum/length(x)
sum_diff <- 0
for (j in x) {
sum_diff <- sum_diff + (j - mean)**2
}
round((sum_diff / (length(x) - 1)), 2)
}
variance(c(10, 20, 30, 40))
variance(c(10, 20, 30, 40))
# By specifing "echo=FALSE" option, the code chunk will be hided when showing the output.
variance(c(10, 20, 30, 40))
# By specifing "echo=FALSE" option, the code chunk will not be displayed when showing the output in the generated report.
variance(c(10, 20, 30, 40))
variance(c(10, 20, 30, 40))
# The first option specifies "echo=FALSE". The code chunk will not be displayed when showing the output in the generated report. Also, in order to comunicate the output more meaningfully, the second option, "comment="The variance is" is added. Then the specified comment characters will be shown before the output.
author: "Peng Zhang"
variance(c(10, 20, 30, 40))
# The first option specifies "echo=FALSE". The code chunk will not be displayed when showing the output in the generated report. Also, in order to comunicate the output more meaningfully, the second option, "comment="The variance is" is added. Then the specified comment characters will be shown before the output.
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
# import necessary library
Y
